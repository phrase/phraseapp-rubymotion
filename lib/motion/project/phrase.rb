unless defined?(Motion::Project::Config)
  raise "This file must be required within a RubyMotion project Rakefile."
end

class PhraseConfig
  attr_accessor :access_token, :enabled, :project_id

  CONFIG_FILE = './app/phrase_config.rb'

  def initialize(config)
    @config = config
    @enabled = false
  end

  def access_token=(access_token)
    @access_token = access_token
    create_phrase_config_file
  end

  def project_id=(project_id)
    @project_id = project_id
    create_phrase_config_file
  end

  def enabled=(enabled)
    @enabled = enabled
    create_phrase_config_file
  end



private
  def create_phrase_config_file
    return unless @access_token

    if !config_file_exists? or config_file_content_outdated?
      File.open(CONFIG_FILE, 'w') { |f| f.write(config_file_content) }
    end
    files = @config.files.flatten
    files.unshift(CONFIG_FILE) unless files.find { |f| File.expand_path(f) == File.expand_path(CONFIG_FILE) }
  end

  def config_file_exists?
    File.exist?(CONFIG_FILE)
  end

  def config_file_content_outdated?
    config_file_exists? && File.read(CONFIG_FILE) != config_file_content
  end

  def config_file_content
    content = <<EOF
# This file is automatically generated. Do not edit.
PHRASEAPP_ENABLED = #{enabled}
PHRASEAPP_ACCESS_TOKEN = "#{access_token}"
PHRASEAPP_PROJECT_ID = "#{project_id}"
EOF
    content
  end
end

module Motion
  module Project
    class Config
      variable :phrase

      def phrase
        @phrase ||= PhraseConfig.new(self)
        yield @phrase if block_given?
        @phrase
      end
    end
  end
end
